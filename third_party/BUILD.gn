# Copyright (c) 2023 The Mogu Authors.
# All rights reserved.

cmake("glog") {
  cmake_dry_run = !is_build_third_party
  postfix = ""
  if (is_debug) {
    postfix = "d"
  }

  cmake_root_dir = "//third_party/glog"
  cmake_build_dir = target_out_dir + "/" + target_name
  cmake_install_dir = root_out_dir + "/third_party/"
  cmake_outputs = [
    "$root_out_dir/third_party/bin/glog$postfix.dll",
    "$root_out_dir/third_party/lib/glog$postfix.lib",
  ]
  cmake_options = [
    "BUILD_SHARED_LIBS=OFF",
  ]
}

cmake("gbenchmark") {
  cmake_dry_run = !is_build_third_party
  postfix = ""
  if (is_debug) {
    postfix = "d"
  }

  cmake_root_dir = "//third_party/googlebenchmark"
  cmake_build_dir = target_out_dir + "/" + target_name
  cmake_install_dir = root_out_dir + "/third_party/"
  cmake_outputs = [
    "$root_out_dir/third_party/bin/benchmark$postfix.dll",
    "$root_out_dir/third_party/lib/benchmark_main$postfix.lib",
    "$root_out_dir/third_party/lib/benchmark$postfix.lib",
  ]
  cmake_options = [
    "BUILD_SHARED_LIBS=OFF",
    "BENCHMARK_ENABLE_TESTING=OFF",
  ]
}

cmake("gtest") {
  cmake_dry_run = !is_build_third_party
  postfix = ""
  if (is_debug) {
    postfix = "d"
  }

  cmake_root_dir = "//third_party/googletest"
  cmake_build_dir = target_out_dir + "/" + target_name
  cmake_install_dir = root_out_dir + "/third_party/"
  cmake_outputs = [
    "$root_out_dir/third_party/bin/gtest$postfix.dll",
    "$root_out_dir/third_party/lib/gtest_main$postfix.lib",
    "$root_out_dir/third_party/lib/gtest$postfix.lib",
  ]
  cmake_options = [
    "BUILD_SHARED_LIBS=OFF",
    "BENCHMARK_ENABLE_TESTING=ON",
  ]
}

cmake("sqlite3") {
  cmake_dry_run = !is_build_third_party
  cmake_root_dir = "//third_party/sqlite3"
  cmake_build_dir = target_out_dir + "/" + target_name
  cmake_install_dir = root_out_dir + "/third_party/"
  cmake_outputs = [
    "$root_out_dir/third_party/bin/sqlite3.exe",
    "$root_out_dir/third_party/lib/sqlite3.lib",
  ]

  cmake_options = [
    "BUILD_SHARED_LIBS=OFF",
  ]
}

cmake("geos") {
  cmake_dry_run = !is_build_third_party
  cmake_root_dir = "//third_party/geos"
  cmake_build_dir = target_out_dir + "/" + target_name
  cmake_install_dir = root_out_dir + "/third_party/"
  cmake_outputs = [
    "$root_out_dir/third_party/bin/geos.dll",
    "$root_out_dir/third_party/lib/geos.lib",
  ]

  cmake_options = [
    "BUILD_SHARED_LIBS=ON",
    "USE_UNSTABLE_GEOS_CPP_API=1",
  ]
}

cmake("cpp-httplib") {
  cmake_dry_run = !is_build_third_party
  cmake_root_dir = "//third_party/cpp-httplib"
  cmake_build_dir = target_out_dir + "/" + target_name
  cmake_install_dir = root_out_dir + "/third_party/"
  cmake_outputs = [
    "$root_out_dir/third_party/include/cpp-httplib/httplib.h",
  ]
}

cmake("SQLiteCpp") {
  cmake_dry_run = !is_build_third_party
  cmake_root_dir = "//third_party/SQLiteCpp"
  cmake_build_dir = target_out_dir + "/" + target_name
  cmake_install_dir = root_out_dir + "/third_party/"
  cmake_outputs = [
    "$root_out_dir/third_party/lib/SQLiteCpp.lib",
    "$root_out_dir/third_party/bin/SQLiteCpp.dll",
  ]

  sqlite3_install = rebase_path("$root_out_dir/third_party")
  cmake_options = [
    "BUILD_SHARED_LIBS=OFF",
    "SQLITECPP_INTERNAL_SQLITE=OFF",
    "SQLITECPP_RUN_CPPLINT=OFF",
    "SQLITE3_INCLUDE_DIR=$sqlite3_install/include",
    "SQLITE3_LIBRARY=$sqlite3_install/lib/sqlite3.lib",
  ]
}

cmake("libspatialindex") {
  cmake_dry_run = !is_build_third_party
  cmake_root_dir = "//third_party/libspatialindex"
  cmake_build_dir = target_out_dir + "/" + target_name
  cmake_install_dir = root_out_dir + "/third_party/"
  cmake_outputs = [
    "$root_out_dir/third_party/bin/spatialindex_c-64.dll",
    "$root_out_dir/third_party/lib/spatialindex-64.lib",
  ]

  cmake_options = [
    "BUILD_SHARED_LIBS=ON",
  ]
}

cmake("libspatialite") {
  cmake_dry_run = !is_build_third_party
  cmake_root_dir = "//third_party/libspatialite"
  cmake_build_dir = target_out_dir + "/" + target_name
  cmake_install_dir = root_out_dir + "/third_party/"
  cmake_outputs = [
    "$root_out_dir/third_party/lib/spatialite.lib",
    "$root_out_dir/third_party/lib/spatialite_i.lib",
    "$root_out_dir/third_party/bin/spatialite.dll",
  ]

  cmake_options = [
    "BUILD_SHARED_LIBS=ON",
  ]
}

cmake("SpatiaLiteCpp") {
  cmake_dry_run = !is_build_third_party
  cmake_root_dir = "//third_party/SpatiaLiteCpp"
  cmake_build_dir = target_out_dir + "/" + target_name
  cmake_install_dir = root_out_dir + "/third_party/"
  cmake_outputs = [
    "$root_out_dir/third_party/bin/SpatiaLiteCpp.dll",
    "$root_out_dir/third_party/lib/SpatiaLiteCpp.lib",
  ]

  spatialite_install = rebase_path("$root_out_dir/third_party")
  cmake_options = [
    "BUILD_SHARED_LIBS=ON",
    "spatialite_dir_inc=$spatialite_install/include",
    "spatialite_dir_lib=$spatialite_install/lib",
  ]
}

cmake("PROJ") {
  cmake_dry_run = !is_build_third_party
  postfix = ""
  if (is_debug) {
    postfix = "_d"
  }

  cmake_root_dir = "//third_party/PROJ"
  cmake_build_dir = target_out_dir + "/" + target_name
  cmake_install_dir = root_out_dir + "/third_party/"
  cmake_outputs = [
    "$root_out_dir/third_party/lib/proj$postfix.lib",
    "$root_out_dir/third_party/bin/proj_9_4$postfix.dll",
  ]

  sqlite3_install = rebase_path("$root_out_dir/third_party")
  cmake_options = [
    "BUILD_SHARED_LIBS=ON",
    "BUILD_TESTING=OFF",
    "ENABLE_TIFF=OFF",
    "ENABLE_CURL=OFF",
    "BUILD_APPS=OFF",
    "BUILD_PROJSYNC=OFF",
    "EXE_SQLITE3=$sqlite3_install/bin/sqlite3.exe",
    "SQLITE3_INCLUDE_DIR=$sqlite3_install/include",
    "SQLITE3_LIBRARY=$sqlite3_install/lib/sqlite3.lib",
  ]
}

cmake("gdal") {
  cmake_dry_run = !is_build_third_party
  postfix = ""
  if (is_debug) {
    postfix = "d"
  }

  cmake_root_dir = "//third_party/gdal"
  cmake_build_dir = target_out_dir + "/" + target_name
  cmake_install_dir = root_out_dir + "/third_party/"
  cmake_outputs = [
    "$root_out_dir/third_party/bin/gdal$postfix.dll",
    "$root_out_dir/third_party/lib/gdal$postfix.lib",
  ]

  proj_install = rebase_path("$root_out_dir/third_party")
  cmake_options = [
    "BUILD_SHARED_LIBS=ON",
    "BUILD_TESTING=OFF",
    "GDAL_BUILD_OPTIONAL_DRIVERS=OFF",
    "OGR_BUILD_OPTIONAL_DRIVERS=OFF",
    "GDAL_USE_INTERNAL_LIBS=ON",
    "PROJ_INCLUDE_DIR=$proj_install/include",
    "PROJ_LIBRARIES=$proj_install/lib",
  ]
}

group("all") {
  deps = [
    "CxImage:CxImage",
  ]
}