# Copyright (c) 2023 The Mogu Authors.
# All rights reserved.

cmake("glog") {
  cmake_root_dir = "//third_party/glog"
  cmake_outputs = [
    "$root_out_dir/glog/bin/glog.dll",
    "$root_out_dir/glog/lib/glog.lib",
  ]
  cmake_options = ["BUILD_SHARED_LIBS=OFF"]
}

cmake("gbenchmark") {
  cmake_root_dir = "//third_party/googlebenchmark"
  cmake_outputs = [
    "$root_out_dir/gbenchmark/bin/googlebenchmark.dll",
    "$root_out_dir/gbenchmark/lib/googlebenchmark.lib",
  ]
  cmake_options = ["BENCHMARK_ENABLE_TESTING=OFF"]
}

cmake("gtest") {
  cmake_root_dir = "//third_party/googletest"
  cmake_outputs = [
    "$root_out_dir/gtest/bin/googletest.dll",
    "$root_out_dir/gtest/lib/googletest.lib",
  ]
}

cmake("geos") {
  cmake_root_dir = "//third_party/geos"
  cmake_outputs = [
    "$root_out_dir/geos/bin/geos.dll",
    "$root_out_dir/geos/lib/geos.lib",
  ]

  cmake_options = [
    "USE_UNSTABLE_GEOS_CPP_API=1",
    "BUILD_SHARED_LIBS=ON",
  ]
}

cmake("cpp-httplib") {
  cmake_root_dir = "//third_party/cpp-httplib"
  cmake_outputs = [
    "$root_out_dir/cpp-httplib/include/httplib.h",
  ]
}

# makefile("protozero") {
#   makefile_root_dir = "//third_party/protozero"
#   makefile_outputs = [
#     "$root_out_dir/protozero/lib/protozero.lib",
#   ]
# }

cmake("sqlite3") {
  cmake_root_dir = "//third_party/sqlite3"
  cmake_outputs = [
    "$root_out_dir/sqlite3/bin/sqlite3.exe",
    "$root_out_dir/sqlite3/lib/sqlite3.lib",
  ]
}

cmake("PROJ") {
  cmake_root_dir = "//third_party/PROJ"
  cmake_outputs = [
    "$root_out_dir/PROJ/lib/proj.lib",
  ]

  sqlite3_install = rebase_path("$root_out_dir/sqlite3")
  cmake_options = [
    "BUILD_SHARED_LIBS=ON",
    "BUILD_TESTING=OFF",
    "ENABLE_TIFF=OFF",
    "ENABLE_CURL=OFF",
    "BUILD_APPS=OFF",
    "BUILD_PROJSYNC=OFF",
    "EXE_SQLITE3=$sqlite3_install/bin/sqlite3.exe",
    "SQLITE3_INCLUDE_DIR=$sqlite3_install/include",
    "SQLITE3_LIBRARY=$sqlite3_install/lib/sqlite3.lib",
  ]
}

# cmake("libtiff") {
#   cmake_root_dir = "//third_party/libtiff"
#   cmake_outputs = [
#     "$root_out_dir/libtiff/lib/libtiff.lib",
#   ]

#   cmake_options = [
#     "BUILD_SHARED_LIBS=OFF",
#   ]
# }

# cmake("libgeotiff") {
#   cmake_root_dir = "//third_party/libgeotiff/libgeotiff"
#   cmake_outputs = [
#     "$root_out_dir/libgeotiff/lib/libgeotiff.lib",
#   ]

#   proj_install = rebase_path("$root_out_dir/PROJ")
#   libtiff_install = rebase_path("$root_out_dir/libtiff")
#   cmake_options = [
#     "BUILD_SHARED_LIBS=ON",
#     "PROJ_INCLUDE_DIR=$proj_install/include",
#     "PROJ_LIBRARY=$proj_install/lib/proj.lib",
#     "TIFF_INCLUDE_DIR=$libtiff_install/include",
#     "TIFF_LIBRARY=$libtiff_install/lib/tiff.lib",
#   ]
# }

cmake("gdal") {
  cmake_root_dir = "//third_party/gdal"
  cmake_outputs = [
    "$root_out_dir/gdal/lib/gdal.lib",
  ]

  proj_install = rebase_path("$root_out_dir/PROJ")
  cmake_options = [
    "BUILD_SHARED_LIBS=ON",
    "GDAL_BUILD_OPTIONAL_DRIVERS=OFF",
    "OGR_BUILD_OPTIONAL_DRIVERS=OFF",
    "GDAL_USE_XERCESC=OFF",
    "PROJ_INCLUDE_DIR=$proj_install/include",
    "PROJ_LIBRARY_RELEASE=$proj_install/lib/proj.lib",
  ]
}

cmake("libspatialindex") {
  cmake_root_dir = "//third_party/libspatialindex"
  cmake_outputs = [
    "$root_out_dir/libspatialindex/bin/libspatialindex.dll",
    "$root_out_dir/libspatialindex/lib/libspatialindex.lib",
  ]

  cmake_options = [
    "BUILD_SHARED_LIBS=ON",
  ]
}

cmake("spatial") {
  cmake_root_dir = "//third_party/spatial"
  cmake_outputs = [
    "$root_out_dir/spatial/include",
  ]

  cmake_options = [
    "BUILD_SHARED_LIBS=ON",
  ]
}

cmake("SpatiaLiteCpp") {
  cmake_root_dir = "//third_party/SpatiaLiteCpp"
  cmake_outputs = [
    "$root_out_dir/SpatiaLiteCpp/bin/SpatiaLiteCpp.dll",
    "$root_out_dir/SpatiaLiteCpp/lib/SpatiaLiteCpp.lib",
  ]

  spatialite_install = rebase_path("$root_out_dir/libspatialite")
  cmake_options = [
    "BUILD_SHARED_LIBS=ON",
    "spatialite_dir_inc=$spatialite_install/include",
    "spatialite_dir_lib=$spatialite_install/lib/proj.lib",
  ]
}

